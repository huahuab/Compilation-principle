把上下无关文法定义在 grammar-input.txt 文本中，需要识别的token序列放在 token.in 文本中，
运行grammar.exe程序，即可读入文法到程序里，为了方便使用和后续操作，程序把每个符号都定义成一个数字，
并且保存了双向的对应关系，然后拓广了文法，添加开始唯一符号，将用 | 连接的式子进行拆分，
程序里用数据结构存储了拓广后的文法. 
getLRMap() 方法先生成LR0自动机，然后judgeLRtype()判断文法类型(1:LR(0),2:SLR(1),3:LR(1))，
1，2类型直接构建对应的分析表，3类型再根据情况决定生成LALR1还是LR1分析表
程序输出规约用到的式子到 grammar-output.txt，识别失败也会输出相应的提示到文本中。
程序中也写了 outputProductionSeq();outputStatus();outputG();outputLR0map();
等方法来进行debug和中间过程的输出，方便观察中间过程和修改bug。

更新优化代码原因：原提交代码只输出了输入的token序列是否合法，并未生成分析树，增加了生成分析树的代码，放在在analysis()方法中，
只是简单的输出了树形结构，并未输出语义分析要用到的属性相关字段。分析树的输出放在了输出文件的最后。